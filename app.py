import json
import os
import sys
import boto3
import streamlit as st
import botocore.config

# using Titan Embedding model to generate embedding
from langchain_aws import BedrockEmbeddings
from langchain_aws import BedrockLLM

# data ingestion
import numpy as np
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import PyPDFDirectoryLoader

# Vector Embedding And Vector Store
from langchain_community.vectorstores import FAISS

# LLM Model
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA

# Bedrock clients
bedrock=boto3.client("bedrock-runtime", region_name="us-east-1")
                             

bedrock_embeddings=BedrockEmbeddings(model_id="amazon.titan-embed-text-v1", client=bedrock)


# data Ingestion
def data_ingestion():
    loader=PyPDFDirectoryLoader("data1212") # generated by ChatGPT
    documents=loader.load()
    print(f"Loaded {len(documents)} documents")  # Debug print
    for doc in documents:
        print(doc.page_content)
    # in our testing Character split works better with this PDF data set
    text_splitter=RecursiveCharacterTextSplitter(chunk_size=500,
                                                 chunk_overlap=50)
    
    docs=text_splitter.split_documents(documents)
    print(f"Split into {len(docs)} chunks")  # Debug print
    print(f"data ingestion finished")
    return docs


# Vector Embedding and Vector store
def get_vector_store(docs, bedrock_embeddings):
    print(f"Split into {len(docs)} chunks")      
    vectorstore_faiss=FAISS.from_documents(
        docs, 
        bedrock_embeddings
    )
    vectorstore_faiss.save_local("faiss_index")
    return print("faiss_index saved to local")

def get_claude_llm():
    #create the Anthropic Model
    llm=BedrockLLM(model_id="ai21.j2-mid-v1", client=bedrock,
                model_kwargs={'maxTokens':512})
    return llm

def get_llama2_llm():
    #create the Anthropic Model
    llm=BedrockLLM(model_id="meta.llama3-8b-instruct-v1:0", client=bedrock,
                model_kwargs={'max_gen_len':512})
    return llm

prompt_template = """

Human: Use the following pieces of context to provide a
concise answer to the question at the end but use atleast summarize with
250 words with detailed explaination. If you dot's know the answer,
just say that you don't know, dont's try to make up an answer.
<context>
{context}
</context>

Question: {question}

Assistant:"""

PROMPT = PromptTemplate(
    template=prompt_template, input_variable=["context", "question"]
)

def get_response_llm(llm, vectorstore_faiss, query):
    qa = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type='stuff', # text-summarization technique
    retriever=vectorstore_faiss.as_retriever(search_type="similarity", search_kwargs={"k":3}),
    
    chain_type_kwargs={"prompt":PROMPT}
    )
    answer=qa({"query":query})
    return answer['result']


def main():
    st.set_page_config("Chat PDF")
    st.header("Chat with PDF using AWS Bedrock")

    user_question = st.text_input("Ask a Question from the pdf files")

    with st.sidebar:
        st.title("Update or Create Vector Store")

        if st.button("Vectors Update"):
            with st.spinner("Processing..."):
                docs = data_ingestion()
                get_vector_store(docs, bedrock_embeddings)
                st.success("Done")

    if st.button("Claude Output"):
        with st.spinner("Processing..."):
            faiss_index = FAISS.load_local("faiss_index", bedrock_embeddings, allow_dangerous_deserialization=True)
            llm=get_claude_llm()

            #faiss_index= get_vector_store(docs)
            st.write(get_response_llm(llm, faiss_index, user_question))
            st.success("Done")


    if st.button("Llama2 Output"):
        with st.spinner("Processing..."):
            faiss_index = FAISS.load_local("faiss_index", bedrock_embeddings, allow_dangerous_deserialization=True)
            llm=get_llama2_llm()

            #faiss_index= get_vector_store(docs)
            st.write(get_response_llm(llm, faiss_index, user_question))
            st.success("Done")

if __name__ == "__main__":
    main()






